window.SIDEBAR_ITEMS = {"enum":[["BlocksRequestError","Error returned by [`ChainNetwork::start_blocks_request`]."],["BlocksRequestResponseEntryError","See [`BlocksRequestError`]."],["CallProofRequestError","Error returned by [`ChainNetwork::start_call_proof_request`]."],["DiscoveryError","Error during [`ChainNetwork::start_kademlia_discovery_round`]."],["Event","Event generated by [`ChainNetwork::next_event`]."],["GrandpaWarpSyncRequestError","Error returned by [`ChainNetwork::start_grandpa_warp_sync_request`]."],["KademliaFindNodeError","Error during [`ChainNetwork::start_kademlia_find_node`]."],["NotificationsOutErr","Error that can happen when trying to open an outbound notifications substream."],["ProtocolError","See [`Event::ProtocolError`]."],["RequestResult","Response to an outgoing request."],["SlotTy",""],["StateRequestError","Error returned by [`ChainNetwork::start_state_request`]."],["StorageProofRequestError","Error returned by [`ChainNetwork::start_storage_proof_request`]."]],"struct":[["ChainConfig","Configuration for a specific overlay network."],["ChainNetwork","Data structure containing the list of all connections, pending or not, and their latest known state. See also the module-level documentation."],["Config","Configuration for a [`ChainNetwork`]."],["EncodedBlockAnnounce","Undecoded but valid block announce."],["EncodedBlockAnnounceHandshake","Undecoded but valid block announce handshake."],["EncodedGrandpaCommitMessage","Undecoded but valid GrandPa commit message."],["EncodedGrandpaWarpSyncResponse","Undecoded but valid GrandPa warp sync response."],["EncodedMerkleProof","Undecoded but valid Merkle proof."],["EncodedStateResponse","Undecoded but valid state response."],["GrandpaState",""],["KademliaOperationId","Identifier for a Kademlia iterative query."],["MultiStreamConnectionTask","State machine dedicated to a single multi-stream connection."],["PendingId","Identifier of a pending connection requested by the network through a [`StartConnect`]."],["SingleStreamConnectionTask","State machine dedicated to a single single-stream connection."],["StartConnect","User must start connecting to the given multiaddress."]]};