window.SIDEBAR_ITEMS = {"enum":[["NibbleFromU8Error","Error when building a [`Nibble`] from a `u8`."],["TrieEntryVersion","The format of the nodes of trie has two different versions."]],"fn":[["all_nibbles","Returns an iterator of all possible nibble values."],["bytes_to_nibbles","Turns an iterator of bytes into an iterator of nibbles corresponding to these bytes."],["empty_trie_merkle_value","Returns the Merkle value of the root of an empty trie."],["nibbles_to_bytes_suffix_extend","Turns an iterator of nibbles into an iterator of bytes."],["ordered_root","Returns the Merkle value of a trie containing the entries passed as parameter, where the keys are the SCALE-codec-encoded indices of these entries."],["trie_root","Returns the Merkle value of a trie containing the entries passed as parameter. The entries passed as parameter are `(key, value)`."]],"mod":[["calculate_root","Freestanding function that calculates the root of a radix-16 Merkle-Patricia trie."],["node_value","Calculation of the Merkle value of a node given the information about it."],["prefix_proof","Scanning, through trie proofs, the list of all keys that share a certain prefix."],["proof_decode","Decodes and verifies a trie proof."],["proof_encode",""],["proof_node_codec",""],["trie_structure","Manages the structure of a trie. Allows inserting and removing nodes, but does not store any value. Only the structure is stored."]],"struct":[["BytesToNibbles","Turns an iterator of bytes into an iterator of nibbles corresponding to these bytes."],["Nibble","A single nibble with four bits."]]};