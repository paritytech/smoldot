#!/bin/sh

# The important step in this script is running `cargo build --target wasm32-wasi` on the Rust
# code. This generates a `wasm` file in `target/wasm32-wasi`.
#
# It is then picked up by `wasm-opt`, which optimizes it and generates `./autogen/tmp.wasm`.
# `wasm_opt` is purely about optimizing. If it isn't available, it is also possible to directly
# use the `.wasm` generated by the Rust compiler.
#
# We then base64-encode the `.wasm` file, and put this base64 string as a constant in
# `./autogen/wasm.js`. It will be decoded at runtime.
#
# The reason for this script is that at the time of writing, there isn't any standard
# cross-platform solution to the problem of importing WebAssembly files. Base64-encoding the
# .wasm file and integrating it as a string is the safe but non-optimal solution.

# Note: the Rust version is pinned because the wasi target is still unstable. Without pinning, it
# is possible for the wasm-js bindings to change between two Rust versions. Feel free to update
# this version pin whenever you like, provided it continues to build.

cargo +1.47.0 build --package substrate-lite-js --target wasm32-wasi --no-default-features --release &&
    wasm-opt -o autogen/tmp.wasm -O ../../../target/wasm32-wasi/release/substrate_lite_js.wasm &&
    echo -n "module.exports = \"" > autogen/wasm.js &&
    cat ./autogen/tmp.wasm | base64 --wrap=0 >> autogen/wasm.js &&
    rm ./autogen/tmp.wasm &&
    echo "\";" >> autogen/wasm.js
