# Smoldot
# Copyright (C) 2019-2022  Parity Technologies (UK) Ltd.
# SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

name: continuous-integration

on:
  pull_request:
  push:
    branches:
      - main   # Running the CI on the main branch is important in order to fill the caches that pull requests will pick up.

jobs:
  test-64bits:
    runs-on: ubuntu-latest
    container:
      image: rust:1.60
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v1
    - run: RUSTFLAGS=-Dwarnings cargo test --locked --workspace --all-features

  test-32bits:
    runs-on: ubuntu-latest
    container:
      image: rust:1.60
    steps:
    - uses: actions/checkout@v3
    - run: apt-get update && apt-get install -y libc6-dev-i386
    - uses: Swatinem/rust-cache@v1
    - run: rustup target add i686-unknown-linux-gnu
    - run: RUSTFLAGS=-Dwarnings cargo test --target i686-unknown-linux-gnu --locked --workspace --all-features

  wasm-node-check:
    runs-on: ubuntu-latest
    container:
      image: rust:1.60
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v1
    - uses: actions/setup-node@v3.1.1
      with:
        node-version: '14'
    - run: apt-get update && apt install -y binaryen # For `wasm-opt`
    - run: cd bin/wasm-node/javascript && RUSTFLAGS=-Dwarnings npm install-ci-test

  wasm-node-size-diff:
    runs-on: ubuntu-latest
    container:
      image: rust:1.60
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Necessary to fetch pull request base below
    - uses: Swatinem/rust-cache@v1
    - uses: actions/setup-node@v3.1.1
      with:
        node-version: '14'
    - uses: baptiste0928/cargo-install@v1  # This action ensures that the twiggy compilation is cached.
      with:
        crate: twiggy
        version: 0.6
    - run: git checkout ${{ github.event.pull_request.base.sha }}
    - run: cd bin/wasm-node/javascript && npm ci && npm run-script build
    - run: cp ./target/wasm32-wasi/min-size-release/smoldot_light_wasm.wasm ./.ci-parent-build.wasm  # TODO: maybe get the path from the `npm build` output or something?
    - run: git checkout ${{ github.event.pull_request.head.sha }}
    - run: cd bin/wasm-node/javascript && npm ci && npm run-script build
    - run: twiggy diff ./.ci-parent-build.wasm ./target/wasm32-wasi/min-size-release/smoldot_light_wasm.wasm > ./twiggy-diff  # TODO: maybe get the path from the `npm build` output or something?
    # Now that we've generated the diff in a `./twiggy-diff` file, the next step is to upload
    # the PR number and diff content as an artifact that will then be picked up by a
    # `workflow_run` action that does the actual commenting.
    - run: |
        mkdir -p ./pr
        echo ${{ github.event.pull_request.number }} > ./pr/number
        cp ./twiggy-diff ./pr
    - uses: actions/upload-artifact@v2
      with:
        name: pr
        path: pr/

  check-features:
    runs-on: ubuntu-latest
    container:
      image: rust:1.60
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v1
    - run: RUSTFLAGS=-Dwarnings cargo check --package smoldot --locked --no-default-features
    - run: RUSTFLAGS=-Dwarnings cargo check --package smoldot --locked --no-default-features --features database-sqlite
    - run: RUSTFLAGS=-Dwarnings cargo check --package smoldot --locked --no-default-features --features std
    - run: RUSTFLAGS=-Dwarnings cargo check --package smoldot --locked --no-default-features --features database-sqlite --features std

  check-rustdoc-links:
    runs-on: ubuntu-latest
    container:
      image: rust:1.60
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v1
    - run: cargo doc --verbose --workspace --all-features --no-deps --document-private-items

  fmt:
    runs-on: ubuntu-latest
    steps:
      # Checks `rustfmt` formatting
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # TODO: as explained in the official repo (https://github.com/actions-rs/clippy), this action uses unstable GH actions features, but has the huge advantage of not requiring `GITHUB_TOKEN` and working on PRs from forked repositories ; should eventually replace `actions-rs/clippy@master` with a specific version
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            components: clippy
            override: true
      - uses: Swatinem/rust-cache@v1  # Note that this is done after switching the compiler version to nightly
      - uses: actions-rs/clippy@master
        with:
          args: --all-features --all-targets

  cargo-deny:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # The `advisories` check isn't done, because pragmatically speaking it fails CI too often.
        # See `audit.yml` instead.
        checks:
          - bans licenses sources
    steps:
    - uses: actions/checkout@v3
    - uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check --config .github/cargo-deny.toml ${{ matrix.checks }}
        arguments: --workspace --all-features

  wasm-node-versions-match:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      # Compares whether the version in `package.json` matches the version in `Cargo.toml`.
      - id: js-version
        run: echo "::set-output name=version::`jq .version ./bin/wasm-node/javascript/package.json`"
      - id: rust-version
        run: echo "::set-output name=version::`cargo read-manifest --manifest-path=./bin/wasm-node/rust/Cargo.toml | jq .version`"
      - run: exit 1
        if: ${{ steps.js-version.outputs.version == '' }}   # Defensive test against mistakes in the CI script
      - run: exit 1
        if: ${{ steps.js-version.outputs.version != steps.rust-version.outputs.version }}

  all-ci:
    # This dummy job depends on all the mandatory checks. It succeeds if and only if CI is
    # considered successful.
    needs: [test-64bits, test-32bits, wasm-node-check, wasm-node-size-diff, check-features, check-rustdoc-links, fmt, clippy, cargo-deny, wasm-node-versions-match]
    runs-on: ubuntu-latest
    steps:
     - run: echo Success
